heat_template_version: 2013-05-23

description: >
  This is a nested Heat used by the 3-Tier Architecture Workload reference document
  created by the Enterprise Working Group.  These templates demonstrate a sample
  LAMP architecture supporting Wordpress.  This template installs and configures 
  Apache and Apache modproxy which is used to redirect traffic to the application nodes.
  This serves as a guide to new users and is not meant for production deployment.

  #Created by: Craig Sterrett 3/23/2016

parameters:
  ssh_key_name:
    type: string
    label: SSH Key Name
    description: REQUIRED PARAMETER -Name of an existing SSH KeyPair to enable SSH access to instances.
    hidden: false
    default: cloudkey

  server_name:
    type: string
    label: Server Name
    description: REQUIRED PARAMETER - Name of the instance to spin up.
    hidden: false
    default: Web_Server

  instance_flavor:
    type: string
    label: Instance Flavor
    description: The flavor type to use for each server.
    default: m1.small
    hidden: false

  image_id:
    type: string
    label: Image ID
    description: >
      REQUIRED PARAMETER - The image id to be used for the compute instance. Please specify
      your own Image ID in your project/tenant.
    hidden: false

  private_network_id:
    type: string
    default: Web_Tier_private_network
    description: The private Web network that will be utilized for all web servers

  security_group:
    type: string
    default: Workload_Web_SG
    description: The Web security group that will be utilized for all web servers

  pool_name:
    type: string
    description: LBaaS Pool to join

  app_lbaas_vip:
    type: string
    description: Application LBaaS virtual IP

  metadata:
    type: json

resources:
  web_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: server_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_flavor }
      key_name: { get_param: ssh_key_name }
      metadata: { get_param: metadata }
      networks:
        - network: { get_param: private_network_id }
      security_groups:
        - { get_param: security_group }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $app_lbaas_vip: { get_param: app_lbaas_vip }
          template: |
            #!/bin/bash -v
            #centos has this "security" feature in sudoers to keep scripts from sudo, comment it out
            sed -i '/Defaults \+requiretty/s/^/#/' /etc/sudoers
            #use apt-get for Debian/ubuntu, and yum for centos/fedora
            if apt-get -v &> /dev/null
            then
             apt-get update -y
             apt-get upgrade -y
             #Install Apache
             apt-get -y --force-yes install apache2
             apt-get install â€“y libapache2-mod-proxy-html libxml2-dev
             a2enmod proxy
             a2enmod proxy_http
             a2enmod deflate
             a2enmod headers
             a2enmod proxy_connect
             a2enmod proxy_html
            cat > /etc/apache2/sites-enabled/000-default.conf << EOL
            <VirtualHost *:*>
                ProxyPreserveHost On
                ProxyPass / http://$app_lbaas_vip/
                ProxyPassReverse / http://$app_lbaas_vip/
                ServerName localhost
            </VirtualHost>
            EOL
             /etc/init.d/apache2 restart
            elif which yum &> /dev/null
            then
             #yum update -y
             #Install Apache
             yum install -y httpd
             yum install -y wget
            cat >> /etc/httpd/conf/httpd.conf << EOL
            <VirtualHost *:*>
                ProxyPreserveHost On
                ProxyPass / http://$app_lbaas_vip/
                ProxyPassReverse / http://$app_lbaas_vip/
                ServerName localhost
            </VirtualHost>
            EOL
             service httpd restart
            fi

  Pool_Member:
      type: OS::Neutron::PoolMember
      properties:
        pool_id: {get_param: pool_name}
        address: {get_attr: [web_server, first_address]}
        protocol_port: 80

outputs:
  web_private_ip:
    description: Private IP address of the Web node
    value: { get_attr: [web_server, first_address] }
  lb_member:
    description: LoadBalancer member details.
    value: { get_attr: [Pool_Member, show] }

