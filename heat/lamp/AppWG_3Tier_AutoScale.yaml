heat_template_version: 2016-04-08
#The value of heat_template_version tells Heat not only the format of the template but also features that will be validated and supported
#2016-04-08 represents the Mitaka release

description: >
  This is the main Heat template for the 3-tier LAMP Workload created by the Enterprise WG.
  This template contains the autoscaling code and calls nested templates which actually do the
  majority of the work.  This file calls the following yaml files
    setup_net_sg.yaml sets up the security groups and networks for Web, App, and Database
    heat_app_tier.yaml starts up application servers and does on-the-fly builds
    heat_web_tier.yaml starts up web servers and does on-the-fly builds
    heat_sql_tier.yaml starts up mysql server and does on-the-fly builds.

  NOTE: This serves as a guide to new users and is not meant for production deployment.

  REQUIRED YAML FILES:
  setup_net_sg.yaml, heat_app_tier.yaml, heat_sql_tier.yaml, heat_web_tier.yaml

  REQUIRED PARAMETERS:
  ssh_key_name, image_id, public_network_id
  
  OPTIONAL PARAMETERS:
  db_instance_flavor, app_instance_flavor, web_instance_flavor, db_server_name, app_server_name, web_server_name, dns_nameserver

  #Created by: Craig Sterrett 3/23/2016


######################################
#The parameters section allows for specifying input parameters that have to be provided when instantiating the template
parameters:
  ssh_key_name:
    type: string
    label: SSH Key Name
    description: REQUIRED PARAMETER -Name of an existing SSH KeyPair to enable SSH access to instances.
    hidden: false

  image_id:
    type: string
    label: Image ID
    description: >
      REQUIRED PARAMETER - The image id to be used for the compute instance. Please specify
      your own Image ID in your project/tenant.  This could be modified to use different
      images for each tier.
    hidden: false

  public_network_id:
    type: string
    label: Public Network
    description: >
      REQUIRED PARAMETER - The public network name or id used to access the internet.
      This will fail if this is not a true public network
    hidden: false

  db_instance_flavor:
    type: string
    label: Database server instance flavor
    description: The flavor type to use for db server.
    default: m1.small
    hidden: false
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large, m1.xlarge]
        description: Value must be one of m1.small, m1.medium, m1.large, m1.xlarge.

  app_instance_flavor:
    type: string
    label: Application server instance flavor
    description: The flavor type to use for app servers.
    default: m1.small
    hidden: false
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large, m1.xlarge]
        description: Value must be one of m1.small, m1.medium, m1.large, m1.xlarge.

  web_instance_flavor:
    type: string
    label: Web server instance flavor
    description: The flavor type to use for web servers.
    default: m1.small
    hidden: false
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large, m1.xlarge]
        description: Value must be one of m1.small, m1.medium, m1.large, m1.xlarge.

  db_server_name:
    type: string
    label: Server Name
    description: Name of the database servers
    hidden: false
    default: db_server

  app_server_name:
    type: string
    label: Server Name
    description: Name of the application servers
    hidden: false
    default: app_server

  web_server_name:
    type: string
    label: Server Name
    description: Name of the web servers
    hidden: false
    default: web_server

  dns_nameserver:
    type: comma_delimited_list
    label: DNS Name Server
    description: The IP address of a DNS nameserver in list format
    default: 8.8.8.8,8.8.4.4

######################################
#The resources section defines actual resources that make up a stack deployed from the HOT template (for instance compute instances, networks, storage volumes).
resources:

####################
#Setup Networking and Security Group
#Call the setup_net_sg.yaml file

  network_setup:
    type: lib/setup_net_sg.yaml
    properties:
      public_network_id: { get_param: public_network_id }
      dns_nameserver: { get_param: dns_nameserver }


####################
##Kick off a Database server

  launch_db_server:
    type: lib/heat_sql_tier.yaml
    properties:
      ssh_key_name: { get_param: ssh_key_name }
      server_name: { get_param: db_server_name }
      instance_flavor: { get_param: db_instance_flavor }
      image_id: { get_param: image_id }
      private_network_id: {get_attr: [network_setup, db_private_network_id]}
      security_group: {get_attr: [network_setup, db_security_group_id]}

####################
#Autoscaling for the app servers

  app_autoscale_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: 2
      min_size: 1
      max_size: 5
      resource:
        type: lib/heat_app_tier.yaml
        properties:
         ssh_key_name:
           get_param: ssh_key_name
         server_name:
           get_param: app_server_name
         instance_flavor:
           get_param: app_instance_flavor
         image_id:
           get_param: image_id
         private_network_id: {get_attr: [network_setup, app_private_network_id]}
         security_group: {get_attr: [network_setup, app_security_group_id]}
         pool_name: {get_attr: [network_setup, app_lbaas_pool_name]}
         #created unique tag to be used by ceilometer to identify meters specific to the app nodes 
         #without some unique metadata tag, ceilometer will group together all resources in the tenant
         metadata: {"metering.autoscale_group_name": "app_autoscale_group"}

####################
  app_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: app_autoscale_group }
      #cooldown prevents duplicate alarms while instances spin up.  Set the value large
      #enough to allow for instance to startup and begin taking requests.
      #TESTING: Set to just 4 min for testing, should be probably at least 10, maybe 20      
      cooldown: 240
      scaling_adjustment: 1

  app_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      #period needs to be greater than the sampling rate in the pipleine.config file in /etc/ceilometer
      #TESTING: Set to just 2 min for testing, could be more like 5
      period: 120
      evaluation_periods: 1
      #Alarms if CPU utilization for ALL app nodes averaged together exceeds 50%
      threshold: 50
      repeat_actions: true
      alarm_actions:
        - {get_attr: [app_scaleup_policy, alarm_url]}
      #Collect data only on servers with the autoscale_group_name metadata set to app_autoscale_group
      #Otherwise ceilometer would look at all servers in the project
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "app_autoscale_group"}
      comparison_operator: gt


  app_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: app_autoscale_group }
      #cooldown prevents duplicate alarms while instances shut down.  Set the value large
      #enough to allow for instance to shutdown and things stabilize.
      #TESTING: Set to just 4 min for testing, should be probably at least 10, maybe 20      
      cooldown: 240
      scaling_adjustment: -1

  app_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      #period needs to be greater than the sampling rate in the pipleine.config file in /etc/ceilometer
      #TESTING: Set to just 2 min for testing, could be more like 5
      period: 120
      evaluation_periods: 1
      #Alarms if CPU utilization for ALL app nodes averaged together drops below 20%
      threshold: 20
      repeat_actions: true
      alarm_actions:
        - {get_attr: [app_scaledown_policy, alarm_url]}
      #Collect data only on servers with the autoscale_group_name metadata set to app_autoscale_group
      #Otherwise ceilometer would look at all servers in the project
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "app_autoscale_group"}
      comparison_operator: lt

       
####################
#Autoscaling for the web servers

  web_autoscale_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: 2
      min_size: 1
      max_size: 5
      resource:
        type: lib/heat_web_tier.yaml
        properties:
         ssh_key_name:
           get_param: ssh_key_name
         server_name:
           get_param: web_server_name
         instance_flavor:
           get_param: web_instance_flavor
         image_id:
           get_param: image_id
         private_network_id: {get_attr: [network_setup, web_private_network_id]}
         security_group: {get_attr: [network_setup, web_security_group_id]}
         pool_name: {get_attr: [network_setup, web_lbaas_pool_name]}
         metadata: {"metering.autoscale_group_name": "web_autoscale_group"}

####################

  web_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      #TESTING: Set to just 4 min for testing, should be probably at least 10, maybe 20
      cooldown: 240
      scaling_adjustment: 1

  web_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      #TESTING: Set to just 2 min for testing, could be more like 5
      period: 120
      evaluation_periods: 1
      threshold: 50
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: gt


  web_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      #TESTING: Set to just 4 min for testing, should be probably at least 10, maybe 20      
      cooldown: 240
      scaling_adjustment: -1

  web_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      #TESTING: Set to just 2 min for testing, could be more like 5      
      period: 120
      evaluation_periods: 1
      threshold: 20
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: lt

######################################
#The outputs section defines output parameters that should be available to the user after a stack has been created.
outputs:

 web_lbaas_ip:
    description: >
      This is the floating IP assigned to the WEB LoadBalancer.
    value: {get_attr: [network_setup, web_lbaas_IP]}

 app_lbaas_ip:
    description: >
      This is the floating IP assigned to the Application LoadBalancer.
    value: {get_attr: [network_setup, app_lbaas_IP]}
 
 web_scale_up_url:
    description: >
      This URL is the webhook to scale up the WEB autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.  You do need to be authenticated
      Example: source openrc; curl -X POST "<url>"
    value: {get_attr: [web_scaleup_policy,  alarm_url]}

 web_scale_down_url:
    description: >
      This URL is the webhook to scale down the WEB autoscaling group.
    value: {get_attr: [web_scaledown_policy,  alarm_url]}

 app_scale_up_url:
    description: >
      This URL is the webhook to scale up the application autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [app_scaleup_policy,  alarm_url]}

 app_scale_down_url:
    description: >
      This URL is the webhook to scale down the application autoscaling group.
    value: {get_attr: [app_scaledown_policy,  alarm_url]}

